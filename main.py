# This file shows you how to use the solver
# Run it to see what happens!
# How to use:
# First, run input.py to obtain the parameters
# Then you paste the parameters into this file.
# Then you just run this file! And that's it!
# btw, BFSSolve is probably the one you want to use.

from game import Game, BoardInput
from solver import BruteForceSolve, RecursiveBacktrackingSolve, BFSSolve, DFSSolve

"""
        Walls = [
            ((0,1), (1,1)),
            ((0, 2), (1, 2)),
            ((1, 2), (1, 3)),
            ((1,1), (2,1)),
            ((2, 1), (2, 0)),
            ((2, 0), (3, 0)),
            ((3, 2), (3, 3)),
        ],
"""
def main():
    # Run input.py to get the parameters
    InputBoard = BoardInput(
        # Code generated by input.py
        numrows=11,
        numcols=13,
        PlayerStartPos=(3, 4),
        MinotaurStartPos=(4, 8),
        GoalPos=(6, 3),
        Walls=[
            ((1, 11), (1, 12)),
            ((9, 6), (10, 6)),
            ((7, 2), (8, 2)),
            ((2, 10), (3, 10)),
            ((4, 12), (5, 12)),
            ((7, 11), (8, 11)),
            ((2, 8), (2, 9)),
            ((3, 4), (3, 5)),
            ((2, 3), (2, 4)),
            ((1, 6), (2, 6)),
            ((6, 12), (7, 12)),
            ((6, 5), (6, 6)),
            ((2, 2), (3, 2)),
            ((1, 8), (2, 8)),
            ((0, 8), (1, 8)),
            ((9, 3), (9, 4)),
            ((9, 4), (10, 4)),
            ((1, 0), (2, 0)),
            ((9, 5), (9, 6)),
            ((6, 6), (7, 6)),
            ((2, 1), (2, 2)),
            ((3, 9), (4, 9)),
            ((0, 11), (1, 11)),
            ((0, 1), (0, 2)),
            ((0, 5), (1, 5)),
            ((5, 11), (6, 11)),
            ((0, 10), (0, 11)),
            ((10, 2), (10, 3)),
            ((10, 7), (10, 8)),
            ((0, 0), (1, 0)),
            ((10, 1), (10, 2)),
            ((0, 2), (0, 3)),
            ((1, 2), (2, 2)),
            ((2, 6), (3, 6)),
            ((7, 6), (8, 6)),
            ((7, 5), (7, 6)),
            ((3, 3), (3, 4)),
            ((4, 6), (5, 6)),
            ((3, 5), (3, 6)),
            ((4, 8), (5, 8)),
            ((5, 0), (6, 0)),
            ((8, 11), (8, 12)),
            ((6, 0), (7, 0)),
            ((6, 2), (7, 2)),
            ((9, 4), (9, 5)),
            ((6, 9), (6, 10)),
            ((1, 5), (1, 6)),
            ((7, 4), (8, 4)),
            ((8, 0), (8, 1)),
            ((8, 5), (8, 6)),
            ((3, 8), (4, 8)),
            ((4, 11), (4, 12)),
            ((7, 0), (7, 1)),
            ((6, 1), (6, 2)),
            ((0, 10), (1, 10)),
            ((4, 9), (4, 10)),
            ((6, 6), (6, 7)),
            ((1, 10), (1, 11)),
            ((3, 2), (3, 3)),
            ((4, 1), (5, 1)),
            ((1, 7), (2, 7)),
            ((5, 2), (6, 2)),
            ((1, 3), (1, 4)),
            ((9, 0), (10, 0)),
            ((1, 9), (2, 9)),
            ((4, 8), (4, 9)),
            ((0, 12), (1, 12)),
            ((0, 9), (1, 9)),
            ((2, 0), (3, 0)),
            ((4, 0), (4, 1)),
            ((9, 3), (10, 3)),
            ((9, 5), (10, 5)),
            ((3, 0), (4, 0)),
            ((3, 3), (4, 3)),
            ((8, 11), (9, 11)),
        ],

    )

    moves = ('D', 'U', 'D', 'L', 'S', 'R', 'U', 'U')


    game = Game(InputBoard)
    print(game.RunGameQuiet(moves))

    DFSSolve(InputBoard)


if __name__ == "__main__":
    main()




"""
        numrows=11,
        numcols=13,
        PlayerStartPos=(3, 4),
        MinotaurStartPos=(4, 8),
        GoalPos=(6, 3),
        Walls=[
            ((1, 11), (1, 12)),
            ((9, 6), (10, 6)),
            ((7, 2), (8, 2)),
            ((2, 10), (3, 10)),
            ((4, 12), (5, 12)),
            ((7, 11), (8, 11)),
            ((2, 8), (2, 9)),
            ((3, 4), (3, 5)),
            ((2, 3), (2, 4)),
            ((1, 6), (2, 6)),
            ((6, 12), (7, 12)),
            ((6, 5), (6, 6)),
            ((2, 2), (3, 2)),
            ((1, 8), (2, 8)),
            ((0, 8), (1, 8)),
            ((9, 3), (9, 4)),
            ((9, 4), (10, 4)),
            ((1, 0), (2, 0)),
            ((9, 5), (9, 6)),
            ((6, 6), (7, 6)),
            ((2, 1), (2, 2)),
            ((3, 9), (4, 9)),
            ((0, 11), (1, 11)),
            ((0, 1), (0, 2)),
            ((0, 5), (1, 5)),
            ((5, 11), (6, 11)),
            ((0, 10), (0, 11)),
            ((10, 2), (10, 3)),
            ((10, 7), (10, 8)),
            ((0, 0), (1, 0)),
            ((10, 1), (10, 2)),
            ((0, 2), (0, 3)),
            ((1, 2), (2, 2)),
            ((2, 6), (3, 6)),
            ((7, 6), (8, 6)),
            ((7, 5), (7, 6)),
            ((3, 3), (3, 4)),
            ((4, 6), (5, 6)),
            ((3, 5), (3, 6)),
            ((4, 8), (5, 8)),
            ((5, 0), (6, 0)),
            ((8, 11), (8, 12)),
            ((6, 0), (7, 0)),
            ((6, 2), (7, 2)),
            ((9, 4), (9, 5)),
            ((6, 9), (6, 10)),
            ((1, 5), (1, 6)),
            ((7, 4), (8, 4)),
            ((8, 0), (8, 1)),
            ((8, 5), (8, 6)),
            ((3, 8), (4, 8)),
            ((4, 11), (4, 12)),
            ((7, 0), (7, 1)),
            ((6, 1), (6, 2)),
            ((0, 10), (1, 10)),
            ((4, 9), (4, 10)),
            ((6, 6), (6, 7)),
            ((1, 10), (1, 11)),
            ((3, 2), (3, 3)),
            ((4, 1), (5, 1)),
            ((1, 7), (2, 7)),
            ((5, 2), (6, 2)),
            ((1, 3), (1, 4)),
            ((9, 0), (10, 0)),
            ((1, 9), (2, 9)),
            ((4, 8), (4, 9)),
            ((0, 12), (1, 12)),
            ((0, 9), (1, 9)),
            ((2, 0), (3, 0)),
            ((4, 0), (4, 1)),
            ((9, 3), (10, 3)),
            ((9, 5), (10, 5)),
            ((3, 0), (4, 0)),
            ((3, 3), (4, 3)),
            ((8, 11), (9, 11)),
        ],
"""